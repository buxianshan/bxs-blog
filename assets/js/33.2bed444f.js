(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{442:function(t,s,a){"use strict";a.r(s);var e=a(36),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{align:"center"}},[t._v("Python 面向对象")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("Python中有大量语法糖，特性和C++、Java也不同，个人认为不需要全都了解，用到什么学什么就好了。")])]),t._v(" "),a("h2",{attrs:{id:"数据模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[t._v("#")]),t._v(" 数据模型")]),t._v(" "),a("p",[t._v("参考Python官方文档："),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3.9/reference/datamodel.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据模型"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("em",[t._v("对象")]),t._v(" 是 Python 中对数据的抽象。 Python 程序中的所有数据都是由对象或对象间关系来表示的。 （从某种意义上说，按照冯·诺依曼的“存储程序计算机”模型，代码本身也是由对象来表示的。）")]),t._v(" "),a("p",[t._v("每个对象都有各自的编号、类型和值。一个对象被创建后，它的 "),a("em",[t._v("编号")]),t._v(" 就绝不会改变；你可以将其理解为该对象在内存中的地址。 '"),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3.9/reference/expressions.html#is",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("is")]),a("OutboundLink")],1),t._v("' 运算符可以比较两个对象的编号是否相同；"),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3.9/library/functions.html#id",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("id()")]),a("OutboundLink")],1),t._v(" 函数能返回一个代表其编号的整型数。")]),t._v(" "),a("h2",{attrs:{id:"特殊方法名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊方法名称"}},[t._v("#")]),t._v(" 特殊方法名称")]),t._v(" "),a("h3",{attrs:{id:"object-init-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-init-self"}},[t._v("#")]),t._v(" "),a("code",[t._v("object.__init__(self[, ...])")])]),t._v(" "),a("p",[t._v("通常把"),a("code",[t._v("__init__()")]),t._v("理解为类的构造函数，但其实对象是由 "),a("code",[t._v("__new__()")]),t._v(" 和 "),a("code",[t._v("__init__()")]),t._v(" 协作构造完成的 (由 "),a("code",[t._v("__new__()")]),t._v(" 创建，并由 "),a("code",[t._v("__init__()")]),t._v("定制)。把"),a("code",[t._v("__init__()")]),t._v("理解为初始化更好，类实例已经由"),a("code",[t._v("__new__")]),t._v("创建出来了，然后经过初始化设置属性等，构造出一个对象。所以"),a("code",[t._v("__init__()")]),t._v("并没有返回值，也不能有返回值，它只是给已经创建的对象进行初始化操作。")]),t._v(" "),a("h3",{attrs:{id:"object-new-cls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-new-cls"}},[t._v("#")]),t._v(" "),a("code",[t._v("object.__new__(cls[, ...])")])]),t._v(" "),a("p",[a("code",[t._v("__new__()")]),t._v("是一个静态方法，创建并返回一个当前类的实例。注意它的第一个参数是cls而不是self。cls代表当前类，self代表当前类的对象。")]),t._v(" "),a("h3",{attrs:{id:"object-del-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-del-self"}},[t._v("#")]),t._v(" "),a("code",[t._v("object.__del__(self)")])]),t._v(" "),a("p",[t._v('在实例将被销毁时调用。注意把它理解为析构函数是不恰当的，官方描述为"由于调用 '),a("code",[t._v("__del__()")]),t._v("方法时周边状况已不确定，在其执行期间发生的异常将被忽略，改为打印一个警告到 "),a("code",[t._v("sys.stderr")]),t._v("。当解释器退出时不会确保为仍然存在的对象调用 "),a("code",[t._v("__del__()")]),t._v('方法。"')]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ……")]),t._v(" "),a("h2",{attrs:{id:"私有变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有变量"}},[t._v("#")]),t._v(" 私有变量")]),t._v(" "),a("p",[t._v("经常听说在 Python 类中以一个下划线开头的变量是保护类型（protected ）的变量，以双下划线开头的变量是私有类型（private）的变量。")]),t._v(" "),a("p",[t._v("但其实这种写法只是Python的一个约定，无论怎么写，最终都不能实现真正意义的私有变量，也就是实际上还是可以被直接访问。")]),t._v(" "),a("p",[t._v("Python只是会把例如 "),a("code",[t._v("__spam")]),t._v(" 这种标识符替换为 "),a("code",[t._v("_classname__spam")]),t._v(" ，所以只要使用 "),a("code",[t._v("objecname._classname__spam")]),t._v(" 还是可以直接访问私有变量的。")]),t._v(" "),a("p",[t._v("demo：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    peter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Peter"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(peter.__name), 直接访问__name会报错：AttributeError: 'Person' object has no attribute '__name'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("peter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_Person__name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("peter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("用PyCharm调试也能看到，实际上只是双下划线开头的变量名被替换成了 "),a("code",[t._v("_classname__spam")]),t._v(" 这种格式：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://buxianshan.oss-cn-beijing.aliyuncs.com/Typora_images/image-20220505114706436.png",alt:"image-20220505114706436"}})]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://docs.python.org/zh-cn/3.9/tutorial/classes.html?highlight=private#private-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python官方文档"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);